<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes - loteroc@gmail.com on maqroll personal site</title>
    <link>https://maqroll.github.io/notes/</link>
    <description>Recent content in Notes - loteroc@gmail.com on maqroll personal site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 07 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://maqroll.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lauterbrunnen</title>
      <link>https://maqroll.github.io/notes/post-20230907/</link>
      <pubDate>Thu, 07 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20230907/</guid>
      <description>If you use Kafka to connect your microservices, sooner or later you start thinking about how to ensure that your data (stored in some database) and your events (the ones you publish in Kafka to notify anyone else about your data changes) tell the same story.
Recently I&amp;rsquo;ve been talking to someone that faced this problem. Instead of going through the different alternatives (this article is a nice reference) I&amp;rsquo;ll try to recap the key points (in my experience).</description>
    </item>
    
    <item>
      <title>Flink tips</title>
      <link>https://maqroll.github.io/notes/post-20230714/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20230714/</guid>
      <description>Not recent but quite helpful. If you are planning to use Flink or even if you already use it in production this post is worth the time.
Points 2 and 7 are specially relevant.
Kryo serialization looks like a great solution initially and usually becomes a nightmare in the long term.
Rocksdb is a great piece of engineering. Going deeper into its multiple options and parameters is worth it at least and mandatory in many cases.</description>
    </item>
    
    <item>
      <title>KStreams remove member tool</title>
      <link>https://maqroll.github.io/notes/post-20220922/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20220922/</guid>
      <description>KIP-345 introduced static membership.
In future works section it&amp;rsquo;s discussed the convenience of adding a new tool to remove instances from the group. Static membership doesn&amp;rsquo;t remove a member from the group until session timeout expires (usually a long time).
It&amp;rsquo;s been a while since static membership is around but that tool never made it.
We miss it so many times that we set up a quick solution.
Help option will show you</description>
    </item>
    
    <item>
      <title>Processing Kafka in Vert.x with control flow</title>
      <link>https://maqroll.github.io/notes/post-20220917/</link>
      <pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20220917/</guid>
      <description>When you read asynchronously from Kafka in Vert.x (subscribing to a KafkaConsumer) ingestion rate it&amp;rsquo;s capped basically by the Kafka broker and the network bandwidth (take this as a simplistic statement). What I really mean it&amp;rsquo;s that this setup can achieve really high ingestion rates without much effort.
If you opt to process those messages synchronously (providing that you have a KafkaConsumer per partition) your performance will be roughly that of Kafka Streams.</description>
    </item>
    
    <item>
      <title>Rockset</title>
      <link>https://maqroll.github.io/notes/post-20220710/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20220710/</guid>
      <description>If you do stateful processing in Kafka Streams, you have already heard of Rocksdb. Rocksdb is a persistent key value store focused on performance. Despite its terse functionality set (put/get/range get and prefix get) is a powerful tool.
One of the members of the original team that developed Rocksdb at facebook founded Rockset. Rockset indexes automatically structured information (json, avro, etc..) on top of Rocksdb and allows to query that info using SQL.</description>
    </item>
    
    <item>
      <title>InMemoryKeyValueStore without serialization/deserialization</title>
      <link>https://maqroll.github.io/notes/post-20220124/</link>
      <pubDate>Mon, 24 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20220124/</guid>
      <description>KStreams provides an in-memory key value store (backed by a topic).
For instance:
 builder.addGlobalStore( Stores.keyValueStoreBuilder( Stores.inMemoryKeyValueStore(STORES), Serdes.String(), Serdes.String()), STORES_TOPIC, Consumed.with(Serdes.String(), Serdes.String()), () -&amp;gt; new GlobalStoreUpdater&amp;lt;&amp;gt;(STORES)); declares one backed by STORES_TOPIC and called STORES. Both key and value are strings.
Being in-memory, heap is a limit to the size of the store.
We use it mostly to implement global stores for master data. Any other system keeps master data updated in the topic and we consume it directly into the global store as a convenient way to make key-value searches.</description>
    </item>
    
    <item>
      <title>Hacking Kafka Connect</title>
      <link>https://maqroll.github.io/notes/post-20211104/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20211104/</guid>
      <description>Second time we face the same problem: process Avro messages with Kafka Connect honoring a schema already setup in Schema Registry.
It looks like the typical interview problem you&amp;rsquo;ll never find in real life. But you know, it&amp;rsquo;s sitting on the sofa.
The interest of this note (if any) is not providing an answer but thinking about why we solved it differently the second time.
 Kafka Connect is a generic framework for processing Kafka messages.</description>
    </item>
    
    <item>
      <title>Nice to meet you, RandomBeans!</title>
      <link>https://maqroll.github.io/notes/post-20211027/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20211027/</guid>
      <description>Hand-coding complex domain entities (with many nested levels) for unit testing is a major pain point.
Taking Avro into consideration make the problem worse (polymorphic union types).
Discovering RandomBeans extension it&amp;rsquo;s been a relief.
Recommended!.</description>
    </item>
    
    <item>
      <title>Nice to meet you, Vert.x!</title>
      <link>https://maqroll.github.io/notes/post-20211024/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20211024/</guid>
      <description>Almost a year ago we decided to give Eclipse Vert.x an opportunity for a new product we were cooking.
The product involves generating NRT indicators over several streams of data coming from Kafka. Volume is high in general but it has to cope with peak retail sales (BF, sales season, etc).
Usually we&amp;rsquo;d turn to KStreams for this kind of processing. To reduce latency, in this product we decided to serve the indicators directly to consumers over websockets.</description>
    </item>
    
  </channel>
</rss>
