<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Works - loteroc@gmail.com on maqroll personal site</title>
    <link>https://maqroll.github.io/</link>
    <description>Recent content in Works - loteroc@gmail.com on maqroll personal site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://maqroll.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Nice to meet you, RandomBeans!</title>
      <link>https://maqroll.github.io/notes/post-20211027/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20211027/</guid>
      <description>Hand-coding complex domain entities (with many nested levels) for unit testing is a major pain point.
Taking Avro into consideration make the problem worse (polymorphic union types).
Discovering RandomBeans extension it&amp;rsquo;s been a relief.
Recommended!.</description>
    </item>
    
    <item>
      <title>Nice to meet you, Vert.x!</title>
      <link>https://maqroll.github.io/notes/post-20211024/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/notes/post-20211024/</guid>
      <description>Almost a year ago we decided to give Eclipse Vert.x an opportunity for a new product we were cooking.
The product involves generating NRT indicators over several streams of data coming from Kafka. Volume is high in general but it has to cope with peak retail sales (BF, sales season, etc).
Usually we&amp;rsquo;d turn to KStreams for this kind of processing. To reduce latency, in this product we decided to serve the indicators directly to consumers over websockets.</description>
    </item>
    
    <item>
      <title>BePP</title>
      <link>https://maqroll.github.io/works/bepp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/works/bepp/</guid>
      <description> BePP Most impactful project so far.
Between 2002 and 2003 I led a great team that designed a new architecture for home banking applications for a major global brand.
Three installations were made in Portugal. After successive mergers, the only one that survives is netbanco.
As of 2020/09/01 is alive and (seems to be) using the same platform.
   </description>
    </item>
    
    <item>
      <title>Metropolis</title>
      <link>https://maqroll.github.io/works/metropolis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/works/metropolis/</guid>
      <description> Metropolis Around 2008 we designed a new core-banking architecture for a major bank in Spain codenamed &#34;Metropolis&#34;.
That technology later became CECA&#39;s reference architecture.
Still in use.
   </description>
    </item>
    
    <item>
      <title>NRT sales funnel</title>
      <link>https://maqroll.github.io/works/sales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/works/sales/</guid>
      <description> NRT sales funnel Imagine the look&amp;feel of funnel-graph-js but updated in near-realtime (less than 5 seconds lag) segmented by country, device type, etc...
You got it!
Besides: top N products in each step (visits, carts and orders) filterable for different criteria(country, section, etc..).
Like this one but aggregating thousands of messages per second under multiple criteria
Sure you&#39;ll miss something like this next BF.
   </description>
    </item>
    
    <item>
      <title>password()</title>
      <link>https://maqroll.github.io/works/passfn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/works/passfn/</guid>
      <description> password() Instead of storing your passwords calculate them using a secure hash function conveniently.
oneshallpass.com reincarnated as a tampermonkey script available through a hotkey.
   </description>
    </item>
    
    <item>
      <title>rc4cygwin</title>
      <link>https://maqroll.github.io/works/rc4cygwin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://maqroll.github.io/works/rc4cygwin/</guid>
      <description> rc shell for cygwin rc was built from scratch for plan9 operating system.
Simple and powerful, I was very fond of it. Code is short enough to be manageable and good enough to learn from it.
At that time I used cygwin so patched the original code to work in cygwin. rc package available in cygwin was a rewrite.
I haven&#39;t used it for ages.
   </description>
    </item>
    
  </channel>
</rss>
